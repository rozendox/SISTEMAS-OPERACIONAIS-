/**
 * ============================================================
 *  Demonstrador de Estrutura de Mem√≥ria de um Processo
 *  Autor: Gabriel Rozendo
 *  Cap√≠tulo: 15 ‚Äì Uso de Mem√≥ria (TEXT, DATA, BSS, HEAP, STACK)
 * ============================================================
 *  Objetivo:
 *  - Demonstrar a localiza√ß√£o das vari√°veis nos segmentos:
 *      TEXT  ‚Üí c√≥digo execut√°vel
 *      DATA  ‚Üí vari√°veis globais inicializadas
 *      BSS   ‚Üí vari√°veis globais n√£o inicializadas
 *      HEAP  ‚Üí mem√≥ria alocada dinamicamente
 *      STACK ‚Üí vari√°veis locais e frames de fun√ß√£o
 * ============================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

// =====================
// SEGMENTOS GLOBAIS
// =====================

// Vari√°vel global inicializada ‚Üí segmento DATA
int global_inicializada = 42;

// Vari√°vel global n√£o inicializada ‚Üí segmento BSS
int global_nao_inicializada;

// Fun√ß√£o simples ‚Üí segmento TEXT
void exemplo_funcao() {
    printf("Executando fun√ß√£o no segmento TEXT.\n");
}

/**
 * @brief Imprime o endere√ßo e o segmento estimado de uma vari√°vel.
 * @param nome Nome simb√≥lico da vari√°vel
 * @param endereco Ponteiro ou endere√ßo da vari√°vel
 * @param segmento Nome do segmento (DATA, BSS, HEAP, STACK)
 */
void print_endereco(const char *nome, void *endereco, const char *segmento) {
    printf("%-30s -> Endere√ßo: %p   | Segmento: %s\n", nome, endereco, segmento);
}

int main(void) {
    printf("===========================================================\n");
    printf("   MAPA DE MEM√ìRIA DE UM PROCESSO (Visualiza√ß√£o Did√°tica)\n");
    printf("===========================================================\n\n");

    // Vari√°vel local ‚Üí segmento STACK
    int variavel_local = 99;

    // Aloca√ß√£o din√¢mica ‚Üí segmento HEAP
    int *ponteiro_heap = (int *) malloc(sizeof(int));
    if (!ponteiro_heap) {
        fprintf(stderr, "Erro: falha ao alocar mem√≥ria din√¢mica.\n");
        return EXIT_FAILURE;
    }
    *ponteiro_heap = 1234;

    // Impress√£o dos endere√ßos e segmentos
    printf("üîπ Endere√ßos de vari√°veis e segmentos:\n\n");
    print_endereco("Fun√ß√£o exemplo_funcao()", (void *) exemplo_funcao, "TEXT");
    print_endereco("Vari√°vel global_inicializada", &global_inicializada, "DATA");
    print_endereco("Vari√°vel global_nao_inicializada", &global_nao_inicializada, "BSS");
    print_endereco("Ponteiro alocado (malloc)", ponteiro_heap, "HEAP");
    print_endereco("Vari√°vel local (main)", &variavel_local, "STACK");

    printf("\n===========================================================\n");
    printf("   OBSERVA√á√ïES:\n");
    printf("===========================================================\n");
    printf("‚Ä¢ TEXT: cont√©m c√≥digo execut√°vel (fun√ß√µes e instru√ß√µes).\n");
    printf("‚Ä¢ DATA: armazena vari√°veis globais e est√°ticas inicializadas.\n");
    printf("‚Ä¢ BSS: cont√©m vari√°veis globais e est√°ticas n√£o inicializadas.\n");
    printf("‚Ä¢ HEAP: regi√£o de crescimento ascendente (malloc/free).\n");
    printf("‚Ä¢ STACK: regi√£o de crescimento descendente (frames de fun√ß√£o).\n");
    printf("===========================================================\n");

    // Demonstra visualmente a separa√ß√£o entre as regi√µes
    printf("\nMapa conceitual (endere√ßos podem variar):\n");
    printf("-----------------------------------------------------------\n");
    printf("|         STACK  ‚Üë (vari√°veis locais, frames)              |\n");
    printf("|----------------------------------------------------------|\n");
    printf("|         HEAP   ‚Üë (malloc, calloc, realloc)               |\n");
    printf("|----------------------------------------------------------|\n");
    printf("|         BSS / DATA (vari√°veis globais)                   |\n");
    printf("|----------------------------------------------------------|\n");
    printf("|         TEXT (c√≥digo execut√°vel)                         |\n");
    printf("-----------------------------------------------------------\n");

    // Libera mem√≥ria alocada dinamicamente
    free(ponteiro_heap);

    return EXIT_SUCCESS;
}
